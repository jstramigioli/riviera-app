// Esquema de Prisma para el hotel

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RoomType {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  rooms       Room[]
  dailyRates  DailyRate[]
}

model Room {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  tags         String[]
  maxPeople    Int
  status       String // available, occupied, maintenance, etc.
  orderIndex   Int           @default(0) // Para ordenar habitaciones correctamente
  reservations Reservation[]
  roomType     RoomType      @relation(fields: [roomTypeId], references: [id])
  roomTypeId   Int
}

model Client {
  id             Int           @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String?
  phone          String?
  documentType   String        @default("DNI")
  documentNumber String?
  notes          String?
  reservations   Reservation[]
}

model Guest {
  id             Int         @id @default(autoincrement())
  firstName      String
  lastName       String
  documentType   String      @default("DNI")
  documentNumber String?
  phone          String?
  email          String?
  address        String?
  city           String?
  reservation    Reservation @relation(fields: [reservationId], references: [id])
  reservationId  Int
  payments       Payment[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Payment {
  id          Int      @id @default(autoincrement())
  guest       Guest    @relation(fields: [guestId], references: [id])
  guestId     Int
  amount      Float
  type        String // "payment" (pago) o "charge" (cargo)
  description String
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Reservation {
  id              Int      @id @default(autoincrement())
  room            Room     @relation(fields: [roomId], references: [id])
  roomId          Int
  mainClient      Client   @relation(fields: [mainClientId], references: [id])
  mainClientId    Int
  guests          Guest[]
  checkIn         DateTime
  checkOut        DateTime
  totalAmount     Float
  status          String // active, finished, cancelled, etc.
  reservationType String   @default("con_desayuno")
  notes           String?
  fixed           Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model DailyRate {
  id         Int      @id @default(autoincrement())
  date       DateTime
  roomType   RoomType @relation(fields: [roomTypeId], references: [id])
  roomTypeId Int
  price      Float
  minStay    Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([date, roomTypeId])
}

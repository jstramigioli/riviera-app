generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hotel {
  id                   String                @id @default(cuid())
  name                 String
  description          String?
  address              String?
  phone                String?
  email                String?
  website              String?
  isActive             Boolean               @default(true)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  dailyRoomRates       DailyRoomRate[]
  dynamicPricingConfig DynamicPricingConfig?
  openDays             OpenDay[]
  roundingConfig       RoundingConfig?
  seasonBlocks         SeasonBlock[]
  serviceTypes         ServiceType[]
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  color String @default("#3B82F6")
  rooms Room[] @relation("RoomToTag")
}

model RoomType {
  id                     Int                     @id @default(autoincrement())
  name                   String                  @unique
  description            String?
  maxPeople              Int                     @default(1)
  orderIndex             Int                     @default(0)
  dailyRoomRates         DailyRoomRate[]
  proportionCoefficients ProportionCoefficient[]
  segments               ReservationSegment[]
  rooms                  Room[]
  seasonPrices           SeasonPrice[]
  virtualRooms           VirtualRoom[]
}

model Room {
  id                    Int                    @id @default(autoincrement())
  name                  String
  description           String?
  maxPeople             Int
  status                String
  orderIndex            Int                    @default(0)
  roomTypeId            Int
  segments              ReservationSegment[]
  roomType              RoomType               @relation(fields: [roomTypeId], references: [id])
  gapPromotions         RoomGapPromotion[]
  inventory             RoomInventory[]
  virtualRoomComponents VirtualRoomComponent[] @relation("VirtualRoomComponents")
  tags                  Tag[]                  @relation("RoomToTag")
  virtualRooms          VirtualRoom[]          @relation("VirtualRoomRooms")
}

model VirtualRoom {
  id          Int                    @id @default(autoincrement())
  name        String
  description String?
  maxPeople   Int
  roomTypeId  Int
  isActive    Boolean                @default(true)
  orderIndex  Int                    @default(0)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  segments    ReservationSegment[]
  inventory   RoomInventory[]
  roomType    RoomType               @relation(fields: [roomTypeId], references: [id])
  components  VirtualRoomComponent[]
  rooms       Room[]                 @relation("VirtualRoomRooms")
}

model VirtualRoomComponent {
  id            Int         @id @default(autoincrement())
  virtualRoomId Int
  roomId        Int
  isRequired    Boolean     @default(true)
  orderIndex    Int         @default(0)
  room          Room        @relation("VirtualRoomComponents", fields: [roomId], references: [id], onDelete: Cascade)
  virtualRoom   VirtualRoom @relation(fields: [virtualRoomId], references: [id], onDelete: Cascade)

  @@unique([virtualRoomId, roomId])
}

model RoomInventory {
  id            Int          @id @default(autoincrement())
  roomId        Int
  virtualRoomId Int?
  date          DateTime
  isAvailable   Boolean      @default(true)
  isBlocked     Boolean      @default(false)
  blockedReason String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  room          Room         @relation(fields: [roomId], references: [id], onDelete: Cascade)
  virtualRoom   VirtualRoom? @relation(fields: [virtualRoomId], references: [id], onDelete: Cascade)

  @@unique([roomId, virtualRoomId, date])
}

model Client {
  id              Int           @id @default(autoincrement())
  firstName       String
  lastName        String
  email           String?
  phone           String?
  documentType    String        @default("DNI")
  documentNumber  String?
  country         String?
  province        String?
  city            String?
  notes           String?
  wantsPromotions Boolean       @default(false)
  esFicticio      Boolean       @default(false)
  queries         Query[]       @relation("ClientQueries")
  queryGroups     QueryGroup[]  @relation("ClientQueryGroups")
  reservations    Reservation[]
}

model Guest {
  id             Int          @id @default(autoincrement())
  firstName      String
  lastName       String
  documentType   String       @default("DNI")
  documentNumber String?
  phone          String?
  email          String?
  address        String?
  city           String?
  reservationId  Int?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  reservation    Reservation? @relation(fields: [reservationId], references: [id])
}

model Reservation {
  id                  Int                    @id @default(autoincrement())
  mainClientId        Int
  status              ReservationStatus      @default(PENDIENTE)
  notes               String?
  isMultiRoom         Boolean                @default(false)
  parentReservationId Int?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  guests              Guest[]
  mainClient          Client                 @relation(fields: [mainClientId], references: [id])
  parentReservation   Reservation?           @relation("MultiRoomReservations", fields: [parentReservationId], references: [id])
  childReservations   Reservation[]          @relation("MultiRoomReservations")
  nightRates          ReservationNightRate[]
  segments            ReservationSegment[]
  pagos               Pago[]
  cargos              Cargo[]
}

model QueryGroup {
  id           String   @id
  mainClientId Int?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  mainClient   Client?  @relation("ClientQueryGroups", fields: [mainClientId], references: [id])
}

model Query {
  id                Int              @id @default(autoincrement())
  mainClientId      Int?
  checkIn           DateTime?
  checkOut          DateTime?
  totalAmount       Float?
  reservationType   String?          @default("con_desayuno")
  serviceType       String?          @default("base")
  fixed             Boolean?         @default(false)
  requiredGuests    Int?
  requiredRoomId    Int?
  requirementsNotes String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  queryGroupId      String?
  segmentIndex      Int?
  requiredTags      Int[]
  mainClient        Client?          @relation("ClientQueries", fields: [mainClientId], references: [id])
  guests            QueryGuest[]
  nightRates        QueryNightRate[]

  @@index([queryGroupId])
}

model QueryGuest {
  id             Int            @id @default(autoincrement())
  firstName      String?
  lastName       String?
  documentType   String?        @default("DNI")
  documentNumber String?
  phone          String?
  email          String?
  address        String?
  city           String?
  queryId        Int?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  query          Query?         @relation(fields: [queryId], references: [id])
  payments       QueryPayment[]
}

model QueryPayment {
  id           Int        @id @default(autoincrement())
  queryGuestId Int
  amount       Float?
  type         String?
  description  String?
  date         DateTime?  @default(now())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  queryGuest   QueryGuest @relation(fields: [queryGuestId], references: [id])
}

model QueryNightRate {
  id                     String    @id @default(cuid())
  queryId                Int
  date                   DateTime?
  baseRate               Float?
  dynamicRate            Float?
  finalRate              Float?
  serviceType            String?
  serviceRate            Float?
  occupancyScore         Float?
  isWeekend              Boolean?  @default(false)
  isHoliday              Boolean?  @default(false)
  gapPromotionApplied    Boolean?  @default(false)
  gapPromotionRate       Float?
  manualOverride         Boolean?  @default(false)
  occupancyAdjustment    Float?
  anticipationAdjustment Float?
  weekendAdjustment      Float?
  holidayAdjustment      Float?
  gapPromotionAmount     Float?
  serviceAdjustment      Float?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  query                  Query     @relation(fields: [queryId], references: [id])

  @@unique([queryId, date])
}

model OpenDay {
  id         Int      @id @default(autoincrement())
  hotelId    String
  date       DateTime
  isClosed   Boolean  @default(true)
  isHoliday  Boolean  @default(false)
  fixedPrice Int?
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  hotel      Hotel    @relation(fields: [hotelId], references: [id])

  @@unique([hotelId, date])
}

model DynamicPricingConfig {
  id                               String   @id @default(cuid())
  hotelId                          String   @unique
  enabled                          Boolean  @default(false)
  anticipationThresholds           Int[]
  anticipationWeight               Float
  globalOccupancyWeight            Float
  isWeekendWeight                  Float
  weekendDays                      Int[]    @default([0, 6])
  isHolidayWeight                  Float
  weatherScoreWeight               Float
  eventImpactWeight                Float
  maxAdjustmentPercentage          Float
  enableGapPromos                  Boolean  @default(true)
  enableWeatherApi                 Boolean  @default(false)
  enableRecentDemand               Boolean  @default(false)
  anticipationMode                 String   @default("ESCALONADO")
  anticipationMaxDays              Int      @default(30)
  anticipationSteps                Json?
  standardRate                     Float?
  idealOccupancy                   Float    @default(80.0)
  occupancyAdjustmentPercentage    Float    @default(20.0)
  anticipationAdjustmentPercentage Float    @default(15.0)
  weekendAdjustmentPercentage      Float    @default(10.0)
  holidayAdjustmentPercentage      Float    @default(25.0)
  occupancyEnabled                 Boolean  @default(true)
  anticipationEnabled              Boolean  @default(true)
  weekendEnabled                   Boolean  @default(true)
  holidayEnabled                   Boolean  @default(true)
  createdAt                        DateTime @default(now())
  updatedAt                        DateTime @updatedAt
  hotel                            Hotel    @relation(fields: [hotelId], references: [id])
}

model DailyRoomRate {
  id               String   @id @default(cuid())
  hotelId          String
  roomTypeId       Int
  date             DateTime
  baseRate         Float
  dynamicRate      Float
  isManualOverride Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  hotel            Hotel    @relation(fields: [hotelId], references: [id])
  roomType         RoomType @relation(fields: [roomTypeId], references: [id])

  @@unique([hotelId, roomTypeId, date])
}

model RoomGapPromotion {
  id           String   @id @default(cuid())
  roomId       Int
  date         DateTime
  discountRate Float
  createdAt    DateTime @default(now())
  room         Room     @relation(fields: [roomId], references: [id])
}

model ReservationNightRate {
  id                     String      @id @default(cuid())
  reservationId          Int
  date                   DateTime
  baseRate               Float
  dynamicRate            Float
  finalRate              Float
  serviceType            String
  serviceRate            Float
  occupancyScore         Float?
  isWeekend              Boolean     @default(false)
  isHoliday              Boolean     @default(false)
  gapPromotionApplied    Boolean     @default(false)
  gapPromotionRate       Float?
  manualOverride         Boolean     @default(false)
  occupancyAdjustment    Float?
  anticipationAdjustment Float?
  weekendAdjustment      Float?
  holidayAdjustment      Float?
  gapPromotionAmount     Float?
  serviceAdjustment      Float?
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  reservation            Reservation @relation(fields: [reservationId], references: [id])

  @@unique([reservationId, date])
}

model RoundingConfig {
  id        String   @id @default(cuid())
  hotelId   String   @unique
  multiple  Int      @default(1)
  mode      String   @default("nearest")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
}

model SeasonBlock {
  id                     String                  @id @default(cuid())
  hotelId                String
  name                   String
  description            String?
  startDate              DateTime
  endDate                DateTime
  orderIndex             Int                     @default(0)
  useBlockServices       Boolean                 @default(false)
  useProportions         Boolean                 @default(false)
  referenceRoomTypeId    Int?
  serviceAdjustmentMode  String                  @default("PERCENTAGE")
  isDraft                Boolean                 @default(true)
  lastSavedAt            DateTime?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  blockServiceSelections BlockServiceSelection[]
  proportionCoefficients ProportionCoefficient[]
  hotel                  Hotel                   @relation(fields: [hotelId], references: [id])
  seasonPrices           SeasonPrice[]

  @@unique([hotelId, name])
}

model SeasonPrice {
  id            String      @id @default(cuid())
  seasonBlockId String
  roomTypeId    Int
  serviceTypeId String
  basePrice     Float
  isDraft       Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  roomType      RoomType    @relation(fields: [roomTypeId], references: [id])
  seasonBlock   SeasonBlock @relation(fields: [seasonBlockId], references: [id], onDelete: Cascade)
  serviceType   ServiceType @relation(fields: [serviceTypeId], references: [id])

  @@unique([seasonBlockId, roomTypeId, serviceTypeId])
}

model ProportionCoefficient {
  id            String      @id @default(cuid())
  seasonBlockId String
  roomTypeId    Int
  coefficient   Float       @default(1.0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  roomType      RoomType    @relation(fields: [roomTypeId], references: [id])
  seasonBlock   SeasonBlock @relation(fields: [seasonBlockId], references: [id], onDelete: Cascade)

  @@unique([seasonBlockId, roomTypeId])
}

model ServiceType {
  id                     String                  @id @default(cuid())
  hotelId                String
  name                   String
  description            String?
  isActive               Boolean                 @default(true)
  orderIndex             Int                     @default(0)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  blockServiceSelections BlockServiceSelection[]
  seasonPrices           SeasonPrice[]
  hotel                  Hotel                   @relation(fields: [hotelId], references: [id])

  @@unique([hotelId, name])
}

model BlockServiceSelection {
  id                   String      @id @default(cuid())
  seasonBlockId        String
  serviceTypeId        String
  isEnabled            Boolean     @default(true)
  orderIndex           Int         @default(0)
  isDraft              Boolean     @default(false)
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  percentageAdjustment Float?      @default(0)
  seasonBlock          SeasonBlock @relation(fields: [seasonBlockId], references: [id], onDelete: Cascade)
  serviceType          ServiceType @relation(fields: [serviceTypeId], references: [id], onDelete: Cascade)

  @@unique([seasonBlockId, serviceTypeId])
}

model ReservationSegment {
  id                 Int          @id @default(autoincrement())
  reservationId      Int
  startDate          DateTime
  endDate            DateTime
  roomId             Int
  roomTypeId         Int?
  virtualRoomId      Int?
  services           String[]
  serviceAdjustments Json?
  baseRate           Float
  rateAdjustments    Json?
  guestCount         Int
  reason             String?
  notes              String?
  isActive           Boolean      @default(true)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  requiredRoomId     Int?
  requiredTags       Int[]        @default([])
  reservation        Reservation  @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  room               Room         @relation(fields: [roomId], references: [id])
  roomType           RoomType?    @relation(fields: [roomTypeId], references: [id])
  virtualRoom        VirtualRoom? @relation(fields: [virtualRoomId], references: [id])
}

model Pago {
  id         Int         @id @default(autoincrement())
  reservaId  Int
  reserva    Reservation @relation(fields: [reservaId], references: [id], onDelete: Cascade)
  fecha      DateTime    @default(now())
  monto      Decimal     @db.Decimal(10, 2)
  moneda     String      @default("ARS") // ARS o USD
  tipoCambio Decimal?    @db.Decimal(10, 4) // Tipo de cambio usado (solo para USD)
  montoARS   Decimal     @db.Decimal(10, 2) // Monto equivalente en pesos argentinos
  metodo     String      // Efectivo, Tarjeta Debito, Tarjeta Credito, Transferencia, etc.
  numeroTarjeta String?  // Número de tarjeta (solo para métodos de tarjeta)
  empresa    String?     // Empresa de la tarjeta (solo para métodos de tarjeta)
  referencia String?     // Número de comprobante, referencia bancaria, etc.
  notas      String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Cargo {
  id          Int         @id @default(autoincrement())
  reservaId   Int
  reserva     Reservation @relation(fields: [reservaId], references: [id], onDelete: Cascade)
  descripcion String
  monto       Decimal     @db.Decimal(10, 2)
  fecha       DateTime    @default(now())
  tipo        String      @default("ALOJAMIENTO") // ALOJAMIENTO, SERVICIO, CONSUMO, OTRO
  notas       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum ReservationStatus {
  PENDIENTE
  CONFIRMADA
  INGRESADA
  FINALIZADA
  CANCELADA
  NO_PRESENTADA
}

model Configuracion {
  id          String   @id @default(cuid())
  clave       String   @unique // Ej: "tipo_cambio_usd"
  valor       String   // Valor como string para flexibilidad
  descripcion String?  // Descripción de la configuración
  activo      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ServiceAdjustmentMode {
  FIXED
  PERCENTAGE
}

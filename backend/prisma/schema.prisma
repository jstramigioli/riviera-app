// Esquema de Prisma para el hotel

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums para el nuevo sistema de tarifas
enum MealPricingMode {
  FIXED
  PERCENTAGE
}

// Modelo principal del hotel
model Hotel {
  id          String   @id @default(cuid())
  name        String
  description String?
  address     String?
  phone       String?
  email       String?
  website     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relaciones
  openDays           OpenDay[]
  operationalPeriods OperationalPeriod[]
  dynamicPricingConfig DynamicPricingConfig?
  seasonalKeyframes   SeasonalKeyframe[]
  dailyRoomRates     DailyRoomRate[]
  mealPricingRules   MealPricingRule?
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  color String @default("#3B82F6") // Color por defecto para las etiquetas
  rooms Room[]
}

model RoomType {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  multiplier  Float      @default(1.0) // Multiplicador del precio base
  rooms       Room[]
  dailyRates  DailyRate[]
  // Nuevas relaciones para el sistema dinámico
  dailyRoomRates DailyRoomRate[]
}

model Room {
  id            Int      @id @default(autoincrement())
  name          String
  description   String?
  tags          Tag[]    // Relación many-to-many con tags
  maxPeople     Int
  status        String   // available, occupied, maintenance, etc.
  orderIndex    Int      @default(0) // Para ordenar habitaciones correctamente
  reservations  Reservation[]
  roomType      RoomType @relation(fields: [roomTypeId], references: [id])
  roomTypeId    Int
  // Nueva relación para promociones de huecos
  gapPromotions RoomGapPromotion[]
}

model Client {
  id             Int      @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String?
  phone          String?
  documentType   String   @default("DNI")
  documentNumber String?
  country        String?
  province       String?
  city           String?
  notes          String?
  wantsPromotions Boolean @default(false) // Si desea recibir promociones por email
  reservations   Reservation[]
}

model Guest {
  id            Int      @id @default(autoincrement())
  firstName     String
  lastName      String
  documentType  String   @default("DNI")
  documentNumber String?
  phone         String?
  email         String?
  address       String?
  city          String?
  reservation   Reservation? @relation(fields: [reservationId], references: [id])
  reservationId Int?
  payments      Payment[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Payment {
  id          Int      @id @default(autoincrement())
  guest       Guest    @relation(fields: [guestId], references: [id])
  guestId     Int
  amount      Float
  type        String   // "payment" (pago) o "charge" (cargo)
  description String
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Reservation {
  id            Int      @id @default(autoincrement())
  room          Room     @relation(fields: [roomId], references: [id])
  roomId        Int
  mainClient    Client   @relation(fields: [mainClientId], references: [id])
  mainClientId  Int
  guests        Guest[]
  checkIn       DateTime
  checkOut      DateTime
  totalAmount   Float
  status        String   // active, finished, cancelled, etc.
  reservationType String @default("con_desayuno")
  notes         String?
  fixed         Boolean  @default(false)
  
  // Requerimientos de la reserva
  requiredGuests        Int      // Cantidad de huéspedes requerida
  requiredRoomId        Int?     // Habitación específica requerida (opcional)
  requiredTags          String[] // Array de IDs de etiquetas requeridas
  requirementsNotes     String?  // Notas adicionales sobre requerimientos
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Modelo legacy para mantener compatibilidad con datos existentes
model DailyRate {
  id          Int      @id @default(autoincrement())
  date        DateTime
  roomType    RoomType @relation(fields: [roomTypeId], references: [id])
  roomTypeId  Int
  price       Float
  minStay     Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([date, roomTypeId])
}

model OpenDay {
  id         Int      @id @default(autoincrement())
  hotel      Hotel    @relation(fields: [hotelId], references: [id])
  hotelId    String
  date       DateTime
  isClosed   Boolean  @default(true)  // Si el hotel está cerrado este día
  isHoliday  Boolean  @default(false) // Si es un feriado
  fixedPrice Int?     // Precio fijo en centavos (opcional)
  notes      String?  // Notas adicionales sobre el día
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([hotelId, date])
}

// Períodos de apertura y cierre del hotel
model OperationalPeriod {
  id        String   @id @default(cuid())
  hotelId   String
  startDate DateTime
  endDate   DateTime
  label     String?  // Título opcional para el período

  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ===== NUEVOS MODELOS PARA SISTEMA DE TARIFAS DINÁMICAS =====

// Configuración global de precios dinámicos
model DynamicPricingConfig {
  id                      String   @id @default(cuid())
  hotel                   Hotel    @relation(fields: [hotelId], references: [id])
  hotelId                 String   @unique
  anticipationThresholds  Int[]    // e.g. [21, 14, 7, 3]
  anticipationWeight      Float
  globalOccupancyWeight   Float
  isWeekendWeight         Float
  isHolidayWeight         Float
  demandIndexWeight       Float
  weatherScoreWeight      Float
  eventImpactWeight       Float
  maxAdjustmentPercentage Float    // e.g. 0.4 (40%)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

// Puntos clave para la curva de estacionalidad
model SeasonalKeyframe {
  id         String   @id @default(cuid())
  hotel      Hotel    @relation(fields: [hotelId], references: [id])
  hotelId    String
  date       DateTime
  basePrice  Float    // precio base por tipo estándar
  isOperational Boolean @default(false) // Si es un keyframe de apertura/cierre
  operationalType String? // "opening" o "closing" para keyframes operacionales
  periodId   String?  // ID del período operacional asociado
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Tarifa diaria por tipo de habitación (nuevo sistema)
model DailyRoomRate {
  id                 String   @id @default(cuid())
  hotel              Hotel    @relation(fields: [hotelId], references: [id])
  hotelId            String
  roomType           RoomType @relation(fields: [roomTypeId], references: [id])
  roomTypeId         Int
  date               DateTime
  baseRate           Float     // calculado desde la curva estacional
  dynamicRate        Float     // resultado tras aplicar el occupancy score
  withBreakfast      Float     // base + desayuno
  withHalfBoard      Float     // base + desayuno + cena
  isManualOverride   Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@unique([hotelId, roomTypeId, date])
}

// Descuentos por huecos entre reservas
model RoomGapPromotion {
  id            String   @id @default(cuid())
  room          Room     @relation(fields: [roomId], references: [id])
  roomId        Int
  date          DateTime
  discountRate  Float    // e.g. 0.15 para 15%
  createdAt     DateTime @default(now())
}

// Configuración para precios de comidas
model MealPricingRule {
  id              String   @id @default(cuid())
  hotel           Hotel    @relation(fields: [hotelId], references: [id])
  hotelId         String   @unique
  breakfastMode   MealPricingMode  // FIXED or PERCENTAGE
  breakfastValue  Float
  dinnerMode      MealPricingMode
  dinnerValue     Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
} 
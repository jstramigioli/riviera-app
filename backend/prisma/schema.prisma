generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hotel {
  id                   String                @id @default(cuid())
  name                 String
  description          String?
  address              String?
  phone                String?
  email                String?
  website              String?
  isActive             Boolean               @default(true)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  dailyRoomRates       DailyRoomRate[]
  dynamicPricingConfig DynamicPricingConfig?
  openDays             OpenDay[]
  roundingConfig       RoundingConfig?
  seasonBlocks         SeasonBlock[]
  serviceTypes         ServiceType[]
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  color String @default("#3B82F6")
  rooms Room[] @relation("RoomToTag")
}

model RoomType {
  id                     Int                     @id @default(autoincrement())
  name                   String                  @unique
  description            String?
  orderIndex             Int                     @default(0)
  dailyRoomRates         DailyRoomRate[]
  proportionCoefficients ProportionCoefficient[]
  rooms                  Room[]
  seasonPrices           SeasonPrice[]
}

model Room {
  id            Int                @id @default(autoincrement())
  name          String
  description   String?
  maxPeople     Int
  status        String
  orderIndex    Int                @default(0)
  roomTypeId    Int
  reservations  Reservation[]
  queries       Query[]            @relation("RoomQueries")
  roomType      RoomType           @relation(fields: [roomTypeId], references: [id])
  gapPromotions RoomGapPromotion[]
  tags          Tag[]              @relation("RoomToTag")
}

model Client {
  id              Int           @id @default(autoincrement())
  firstName       String
  lastName        String
  email           String?
  phone           String?
  documentType    String        @default("DNI")
  documentNumber  String?
  country         String?
  province        String?
  city            String?
  notes           String?
  wantsPromotions Boolean       @default(false)
  reservations    Reservation[]
  queries         Query[]       @relation("ClientQueries")
}

model Guest {
  id             Int          @id @default(autoincrement())
  firstName      String
  lastName       String
  documentType   String       @default("DNI")
  documentNumber String?
  phone          String?
  email          String?
  address        String?
  city           String?
  reservationId  Int?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  reservation    Reservation? @relation(fields: [reservationId], references: [id])
  payments       Payment[]
}

model Payment {
  id          Int      @id @default(autoincrement())
  guestId     Int
  amount      Float
  type        String
  description String
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  guest       Guest    @relation(fields: [guestId], references: [id])
}

model Reservation {
  id                Int                    @id @default(autoincrement())
  roomId            Int
  mainClientId      Int
  checkIn           DateTime
  checkOut          DateTime
  totalAmount       Float
  status            String
  reservationType   String                 @default("con_desayuno")
  notes             String?
  fixed             Boolean                @default(false)
  requiredGuests    Int
  requiredRoomId    Int?
  requiredTags      String[]
  requirementsNotes String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  guests            Guest[]
  mainClient        Client                 @relation(fields: [mainClientId], references: [id])
  room              Room                   @relation(fields: [roomId], references: [id])
  nightRates        ReservationNightRate[]
}

model Query {
  id                Int                    @id @default(autoincrement())
  roomId            Int?
  mainClientId      Int?
  checkIn           DateTime?
  checkOut          DateTime?
  totalAmount       Float?
  status            String?                @default("pendiente")
  reservationType   String?                @default("con_desayuno")
  notes             String?
  fixed             Boolean?               @default(false)
  requiredGuests    Int?
  requiredRoomId    Int?
  requiredTags      String[]
  requirementsNotes String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  guests            QueryGuest[]
  mainClient        Client?                @relation("ClientQueries", fields: [mainClientId], references: [id])
  room              Room?                  @relation("RoomQueries", fields: [roomId], references: [id])
  nightRates        QueryNightRate[]
}

model QueryGuest {
  id             Int          @id @default(autoincrement())
  firstName      String?
  lastName       String?
  documentType   String?      @default("DNI")
  documentNumber String?
  phone          String?
  email          String?
  address        String?
  city           String?
  queryId        Int?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  query          Query?       @relation(fields: [queryId], references: [id])
  payments       QueryPayment[]
}

model QueryPayment {
  id          Int         @id @default(autoincrement())
  queryGuestId Int
  amount      Float?
  type        String?
  description String?
  date        DateTime?   @default(now())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  queryGuest  QueryGuest  @relation(fields: [queryGuestId], references: [id])
}

model QueryNightRate {
  id                     String      @id @default(cuid())
  queryId                Int
  date                   DateTime?
  baseRate               Float?
  dynamicRate            Float?
  finalRate              Float?
  serviceType            String?
  serviceRate            Float?
  occupancyScore         Float?
  isWeekend              Boolean?    @default(false)
  isHoliday              Boolean?    @default(false)
  gapPromotionApplied    Boolean?    @default(false)
  gapPromotionRate       Float?
  manualOverride         Boolean?    @default(false)
  basePrice              Float?
  occupancyAdjustment    Float?
  anticipationAdjustment Float?
  weekendAdjustment      Float?
  holidayAdjustment      Float?
  gapPromotionAmount     Float?
  serviceAdjustment      Float?
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  query                  Query       @relation(fields: [queryId], references: [id])

  @@unique([queryId, date])
}

model OpenDay {
  id         Int      @id @default(autoincrement())
  hotelId    String
  date       DateTime
  isClosed   Boolean  @default(true)
  isHoliday  Boolean  @default(false)
  fixedPrice Int?
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  hotel      Hotel    @relation(fields: [hotelId], references: [id])

  @@unique([hotelId, date])
}

model DynamicPricingConfig {
  id                               String   @id @default(cuid())
  hotelId                          String   @unique
  enabled                          Boolean  @default(false)
  anticipationThresholds           Int[]
  anticipationWeight               Float
  globalOccupancyWeight            Float
  isWeekendWeight                  Float
  weekendDays                      Int[]    @default([0, 6])
  isHolidayWeight                  Float
  weatherScoreWeight               Float
  eventImpactWeight                Float
  maxAdjustmentPercentage          Float
  enableGapPromos                  Boolean  @default(true)
  enableWeatherApi                 Boolean  @default(false)
  enableRecentDemand               Boolean  @default(false)
  anticipationMode                 String   @default("ESCALONADO")
  anticipationMaxDays              Int      @default(30)
  anticipationSteps                Json?
  standardRate                     Float?
  idealOccupancy                   Float    @default(80.0)
  occupancyAdjustmentPercentage    Float    @default(20.0)
  anticipationAdjustmentPercentage Float    @default(15.0)
  weekendAdjustmentPercentage      Float    @default(10.0)
  holidayAdjustmentPercentage      Float    @default(25.0)
  occupancyEnabled                 Boolean  @default(true)
  anticipationEnabled              Boolean  @default(true)
  weekendEnabled                   Boolean  @default(true)
  holidayEnabled                   Boolean  @default(true)
  createdAt                        DateTime @default(now())
  updatedAt                        DateTime @updatedAt
  hotel                            Hotel    @relation(fields: [hotelId], references: [id])
}

model DailyRoomRate {
  id               String   @id @default(cuid())
  hotelId          String
  roomTypeId       Int
  date             DateTime
  baseRate         Float
  dynamicRate      Float
  isManualOverride Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  hotel            Hotel    @relation(fields: [hotelId], references: [id])
  roomType         RoomType @relation(fields: [roomTypeId], references: [id])

  @@unique([hotelId, roomTypeId, date])
}

model RoomGapPromotion {
  id           String   @id @default(cuid())
  roomId       Int
  date         DateTime
  discountRate Float
  createdAt    DateTime @default(now())
  room         Room     @relation(fields: [roomId], references: [id])
}

model ReservationNightRate {
  id                     String      @id @default(cuid())
  reservationId          Int
  date                   DateTime
  baseRate               Float
  dynamicRate            Float
  finalRate              Float
  serviceType            String
  serviceRate            Float
  occupancyScore         Float?
  isWeekend              Boolean     @default(false)
  isHoliday              Boolean     @default(false)
  gapPromotionApplied    Boolean     @default(false)
  gapPromotionRate       Float?
  manualOverride         Boolean     @default(false)
  basePrice              Float
  occupancyAdjustment    Float?
  anticipationAdjustment Float?
  weekendAdjustment      Float?
  holidayAdjustment      Float?
  gapPromotionAmount     Float?
  serviceAdjustment      Float?
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  reservation            Reservation @relation(fields: [reservationId], references: [id])

  @@unique([reservationId, date])
}

model RoundingConfig {
  id        String   @id @default(cuid())
  hotelId   String   @unique
  multiple  Int      @default(1)
  mode      String   @default("nearest")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
}

model SeasonBlock {
  id                     String                  @id @default(cuid())
  hotelId                String
  name                   String
  description            String?
  startDate              DateTime
  endDate                DateTime
  isActive               Boolean                 @default(true)
  orderIndex             Int                     @default(0)
  useBlockServices       Boolean                 @default(false)
  basePrice              Float?
  useProportions         Boolean                 @default(false)
  referenceRoomTypeId    Int?
  serviceAdjustmentMode  String                  @default("PERCENTAGE")
  isDraft                Boolean                 @default(false)
  lastSavedAt            DateTime?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  blockServiceSelections BlockServiceSelection[]
  proportionCoefficients ProportionCoefficient[]
  hotel                  Hotel                   @relation(fields: [hotelId], references: [id])
  seasonPrices           SeasonPrice[]

  @@unique([hotelId, name])
}

model SeasonPrice {
  id            String      @id @default(cuid())
  seasonBlockId String
  roomTypeId    Int
  serviceTypeId String
  basePrice     Float
  isDraft       Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  roomType      RoomType    @relation(fields: [roomTypeId], references: [id])
  seasonBlock   SeasonBlock @relation(fields: [seasonBlockId], references: [id], onDelete: Cascade)
  serviceType   ServiceType @relation(fields: [serviceTypeId], references: [id])

  @@unique([seasonBlockId, roomTypeId, serviceTypeId])
}

model ProportionCoefficient {
  id            String      @id @default(cuid())
  seasonBlockId String
  roomTypeId    Int
  coefficient   Float       @default(1.0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  roomType      RoomType    @relation(fields: [roomTypeId], references: [id])
  seasonBlock   SeasonBlock @relation(fields: [seasonBlockId], references: [id], onDelete: Cascade)

  @@unique([seasonBlockId, roomTypeId])
}

model ServiceType {
  id                     String                  @id @default(cuid())
  hotelId                String
  name                   String
  description            String?
  isActive               Boolean                 @default(true)
  orderIndex             Int                     @default(0)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  blockServiceSelections BlockServiceSelection[]
  seasonPrices           SeasonPrice[]
  hotel                  Hotel                   @relation(fields: [hotelId], references: [id])

  @@unique([hotelId, name])
}

model BlockServiceSelection {
  id                   String      @id @default(cuid())
  seasonBlockId        String
  serviceTypeId        String
  isEnabled            Boolean     @default(true)
  orderIndex           Int         @default(0)
  isDraft              Boolean     @default(false)
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  percentageAdjustment Float?      @default(0)
  seasonBlock          SeasonBlock @relation(fields: [seasonBlockId], references: [id], onDelete: Cascade)
  serviceType          ServiceType @relation(fields: [serviceTypeId], references: [id], onDelete: Cascade)

  @@unique([seasonBlockId, serviceTypeId])
}

enum ServiceAdjustmentMode {
  FIXED
  PERCENTAGE
}
